---
description: 
globs: 
alwaysApply: true
---
# AI Rules for Yoga CoPilot (MVP)

## Project Description

Yoga CoPilot (MVP) is a web application designed to provide yoga instructors and self-practitioners with quick, personalized "mini-yoga practices" generated by artificial intelligence. The MVP aims to create a tool that, based on basic user input parameters (duration, level), generates complete, well-thought-out asana sequences lasting up to 30 minutes. The application aims to save users time and provide targeted inspiration for practice.

This MVP utilizes Supabase for authentication, backend functions (Edge Functions), and the database, along with an external language model (LLM) for sequence generation. The user interface is built using Astro, React, and Tailwind CSS.


## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/layouts` - Astro layouts
- `./src/pages` - Astro pages
- `./src/pages/api` - API endpoints
- `./src/middleware/index.ts` - Astro middleware
- `./src/db` - Supabase clients and types
- `./src/types.ts` - Shared types for backend and frontend (Entities, DTOs)
- `./src/components` - Client-side components written in Astro (static) and React (dynamic)
- `./src/components/ui` - Client-side components from Shadcn/ui
- `./src/lib` - Services and helpers 
- `./src/assets` - static internal assets
- `./public` - public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
